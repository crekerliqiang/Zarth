package string.kmp;

public class Data {
//	final static String P1 = "ABCDABD";
//	final static String S1 = "BBC ABCDAB ABCDABCDABDE";

	
	final static String P1  = "ABCDABD";
	final static String S1 = "构、面试、算法，才再次仔细回顾了这个KMP，在综合了一些网友的理解、以及算法班的两位讲师朋友曹博、邹博的理解之后，写了9张PPT，发在微博上。随后，一不做二不休，索性将PPT上的内容整理到了本文之中（后来文章越写越完整，所含内容早已不再是九张PPT 那样简单了）。\n" + 
			"\n" + 
			"    KMP本身不复杂，但网上绝大部分的文章（包括本文的2011年版本）把它讲混乱了。下面，咱们从暴力匹配算法讲起，随后阐述KMP的流程 步骤、next 数组的简单求解 递推原理 代码求解，接着基于next 数组匹配，谈到有限状态自动机，next 数组的优化，KMP的时间复杂度分析，最后简要介绍两个KMP的扩展算法。\n" + 
			"\n" + 
			"    全文力图给你一个最为完整最为清晰的KMP，希望更多的人不再被KMP折磨或纠缠，不再被一些混乱的文章所混乱。有何疑问，欢迎随时留言评论，thanks。\n" + 
			"\n" + 
			" \n" + 
			"2. 暴力匹配算法\n" + 
			"    假设现在我们面临这样一个问题：有一个文本串S，和一个模式串P，现在要查找P在S中的位置，怎么查找呢？\n" + 
			"\n" + 
			"    如果用暴力匹配的思路，并假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置，则有：\n" + 
			"\n" + 
			"如果当前字符匹配成功（即S[i] == P[j]），则i++，j++，继续匹配下一个字符；\n" + 
			"如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。\n" + 
			"    理清楚了暴力匹配算法的流程及内在的逻辑，咱们可以写出暴力匹配的代码，如下：\n" + 
			"\n" + 
			"int ViolentMatch(char* s, char* p)\n" + 
			"{\n" + 
			"	int sLen = strlen(s);\n" + 
			"	int pLen = strlen(p);\n" + 
			" \n" + 
			"	int i = 0;\n" + 
			"	int j = 0;\n" + 
			"	while (i < sLen && j < pLen)\n" + 
			"	{\n" + 
			"		if (s[i] == p[j])\n" + 
			"		{\n" + 
			"			//①如果当前字符匹配成功（即S[i] == P[j]），则i++，j++    \n" + 
			"			i++;\n" + 
			"			j++;\n" + 
			"		}\n" + 
			"		else\n" + 
			"		{\n" + 
			"			//②如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0    \n" + 
			"			i = i - j + 1;\n" + 
			"			j = 0;\n" + 
			"		}\n" + 
			"	}\n" + 
			"	//匹配成功，返回模式串p在文本串s中的位置，否则返回-1\n" + 
			"	if (j == pLen)\n" + 
			"		return i - j;\n" + 
			"	else\n" + 
			"		return -1;\n" + 
			"}\n" + 
			"    举个例子，如果给定文本串S“BBC ABCDAB ABCDABCDABDE”，和模式串P“ABCDABD”，现在要拿模式串P去跟文本串S匹配，整个过程如下所示：\n" + 
			"\n" + 
			"    1. S[0]为B，P[0]为A，不匹配，执行第②条指令：“如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0”，S[1]跟P[0]匹配，相当于模式串要往右移动一位（i=1，j=0）\n" + 
			"\n" + 
			"\n" + 
			"    2. S[1]跟P[0]还是不匹配，继续执行第②条指令：“如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0”，S[2]跟P[0]匹配（i=2，j=0），从而模式串不断的向右移动一位（不断的执行“令i = i - (j - 1)，j = 0”，i从2变到4，j一直为0）\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    3. 直到S[4]跟P[0]匹配成功（i=4，j=0），此时按照上面的暴力匹配算法的思路，转而执行第①条指令：“如果当前字符匹配成功（即S[i] == P[j]），则i++，j++”，可得S[i]为S[5]，P[j]为P[1]，即接下来S[5]跟P[1]匹配（i=5，j=1）\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    4. S[5]跟P[1]匹配成功，继续执行第①条指令：“如果当前字符匹配成功（即S[i] == P[j]），则i++，j++”，得到S[6]跟P[2]匹配（i=6，j=2），如此进行下去\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    5. 直到S[10]为空格字符，P[6]为字符D（i=10，j=6），因为不匹配，重新执行第②条指令：“如果失配（即S[i]! = P[j]），令i = i - (j - 1)，j = 0”，相当于S[5]跟P[0]匹配（i=5，j=0）\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    6. 至此，我们可以看到，如果按照暴力匹配算法的思路，尽管之前文本串和模式串已经分别匹配到了S[9]、P[5]，但因为S[10]跟P[6]不匹配，所以文本串回溯到S[5]，模式串回溯到P[0]，从而让S[5]跟P[0]匹配。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    而S[5]肯定跟P[0]失配。为什么呢？因为在之前第4步匹配中，我们已经得知S[5] = P[1] = B，而P[0] = A，即P[1] != P[0]，故S[5]必定不等于P[0]，所以回溯过去必然会导致失配。那有没有一种算法，让i 不往回退，只需要移动j 即可呢？\n" + 
			"\n" + 
			"    答案是肯定的。这种算法就是本文的主旨KMP算法，它利用之前已经部分匹配这个有效信息，保持i 不回溯，通过修改j 的位置，让模式串尽量地移动到有效的位置。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"3. KMP算法\n" + 
			"3.1 定义\n" + 
			"    Knuth-Morris-Pratt 字符串查找算法，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法。\n" + 
			"\n" + 
			"    下面先直接给出KMP的算法流程（如果感到一点点不适，没关系，坚持下，稍后会有具体步骤及解释，越往后看越会柳暗花明☺）：\n" + 
			"\n" + 
			"假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置\n" + 
			"如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；\n" + 
			"如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。\n" + 
			"换言之，当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值（next 数组的求解会在下文的3.3.3节中详细阐述），即移动的实际位数为：j - next[j]，且此值大于等于1。\n" + 
			"    很快，你也会意识到next 数组各值的含义：代表当前字符之前的字符串中，有多大长度的相同前缀后缀。例如如果next [j] = k，代表j 之前的字符串中有最大长度为k 的相同前缀后缀。\n" + 
			"\n" + 
			"    此也意味着在某个字符失配时，该字符对应的next 值会告诉你下一步匹配中，模式串应该跳到哪个位置（跳到next [j] 的位置）。如果next [j] 等于0或-1，则跳到模式串的开头字符，若next [j] = k 且 k > 0，代表下次匹配跳到j 之前的某个字符，而不是跳到开头，且具体跳过了k 个字符。\n" + 
			"\n" + 
			"    转换成代码表示，则是：\n" + 
			"\n" + 
			"int KmpSearch(char* s, char* p)\n" + 
			"{\n" + 
			"	int i = 0;\n" + 
			"	int j = 0;\n" + 
			"	int sLen = strlen(s);\n" + 
			"	int pLen = strlen(p);\n" + 
			"	while (i < sLen && j < pLen)\n" + 
			"	{\n" + 
			"		//①如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++    \n" + 
			"		if (j == -1 || s[i] == p[j])\n" + 
			"		{\n" + 
			"			i++;\n" + 
			"			j++;\n" + 
			"		}\n" + 
			"		else\n" + 
			"		{\n" + 
			"			//②如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]    \n" + 
			"			//next[j]即为j所对应的next值      \n" + 
			"			j = next[j];\n" + 
			"		}\n" + 
			"	}\n" + 
			"	if (j == pLen)\n" + 
			"		return i - j;\n" + 
			"	else\n" + 
			"		return -1;\n" + 
			"}\n" + 
			"    继续拿之前的例子来说，当S[10]跟P[6]匹配失败时，KMP不是跟暴力匹配那样简单的把模式串右移一位，而是执行第②条指令：“如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]”，即j 从6变到2（后面我们将求得P[6]，即字符D对应的next 值为2），所以相当于模式串向右移动的位数为j - next[j]（j - next[j] = 6-2 = 4）。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    向右移动4位后，S[10]跟P[2]继续匹配。为什么要向右移动4位呢，因为移动4位后，模式串中又有个“AB”可以继续跟S[8]S[9]对应着，从而不用让i 回溯。相当于在除去字符D的模式串子串中寻找相同的前缀和后缀，然后根据前缀后缀求出next 数组，最后基于next 数组进行匹配（不关心next 数组是怎么求来的，只想看匹配过程是咋样的，可直接跳到下文3.3.4节）。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"3.2 步骤\n" + 
			"①寻找前缀后缀最长公共元素长度\n" + 
			"对于P = p0 p1 ...pj-1 pj，寻找模式串P中长度最大且相等的前缀和后缀。如果存在p0 p1 ...pk-1 pk = pj- k pj-k+1...pj-1 pj，那么在包含pj的模式串中有最大长度为k+1的相同前缀后缀。举个例子，如果给定的模式串为“abab”，那么它的各个子串的前缀后缀的公共元素的最大长度如下表格所示：\n" + 
			" \n" + 
			"\n" + 
			"比如对于字符串aba来说，它有长度为1的相同前缀后缀a；而对于字符串abab来说，它有长度为2的相同前缀后缀ab（相同前缀后缀的长度为k + 1，k + 1 = 2）。\n" + 
			"\n" + 
			"②求next数组\n" + 
			"next 数组考虑的是除当前字符外的最长相同前缀后缀，所以通过第①步骤求得各个前缀后缀的公共元素的最大长度后，只要稍作变形即可：将第①步骤中求得的值整体右移一位，然后初值赋为-1，如下表格所示：\n" + 
			" \n" + 
			"\n" + 
			"比如对于aba来说，第3个字符a之前的字符串ab中有长度为0的相同前缀后缀，所以第3个字符a对应的next值为0；而对于abab来说，第4个字符b之前的字符串aba中有长度为1的相同前缀后缀a，所以第4个字符b对应的next值为1（相同前缀后缀的长度为k，k = 1）。\n" + 
			"\n" + 
			"③根据next数组进行匹配\n" + 
			"匹配失配，j = next [j]，模式串向右移动的位数为：j - next[j]。换言之，当模式串的后缀pj-k pj-k+1, ..., pj-1 跟文本串si-k si-k+1, ..., si-1匹配成功，但pj 跟si匹配失败时，因为next[j] = k，相当于在不包含pj的模式串中有最大长度为k 的相同前缀后缀，即p0 p1 ...pk-1 = pj-k pj-k+1...pj-1，故令j = next[j]，从而让模式串右移j - next[j] 位，使得模式串的前缀p0 p1, ..., pk-1对应着文本串 si-k si-k+1, ..., si-1，而后让pk 跟si 继续匹配。如下图所示：\n" + 
			" \n" + 
			"    综上，KMP的next 数组相当于告诉我们：当模式串中的某个字符跟文本串中的某个字符匹配失配时，模式串下一步应该跳到哪个位置。如模式串中在j 处的字符跟文本串在i 处的字符匹配失配时，下一步用next [j] 处的字符继续跟文本串i 处的字符匹配，相当于模式串向右移动 j - next[j] 位。\n" + 
			"\n" + 
			"    接下来，分别具体解释上述3个步骤。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"3.3 解释\n" + 
			"3.3.1 寻找最长前缀后缀\n" + 
			"\n" + 
			"    如果给定的模式串是：“ABCDABD”，从左至右遍历整个模式串，其各个子串的前缀后缀分别如下表格所示：\n" + 
			"\n" + 
			"    也就是说，原模式串子串对应的各个前缀后缀的公共元素的最大长度表为（下简称《最大长度表》）：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"3.3.2 基于《最大长度表》匹配\n" + 
			"\n" + 
			"    因为模式串中首尾可能会有重复的字符，故可得出下述结论：\n" + 
			"\n" + 
			"失配时，模式串向右移动的位数为：已匹配字符数 - 失配字符的上一位字符所对应的最大长度值\n" + 
			"    下面，咱们就结合之前的《最大长度表》和上述结论，进行字符串的匹配。如果给定文本串“BBC ABCDAB ABCDABCDABDE”，和模式串“ABCDABD”，现在要拿模式串去跟文本串匹配，如下图所示：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"1. 因为模式串中的字符A跟文本串中的字符B、B、C、空格一开始就不匹配，所以不必考虑结论，直接将模式串不断的右移一位即可，直到模式串中的字符A跟文本串的第5个字符A匹配成功：\n" + 
			" \n" + 
			"\n" + 
			"2. 继续往后匹配，当模式串最后一个字符D跟文本串匹配时失配，显而易见，模式串需要向右移动。但向右移动多少位呢？因为此时已经匹配的字符数为6个（ABCDAB），然后根据《最大长度表》可得失配字符D的上一位字符B对应的长度值为2，所以根据之前的结论，可知需要向右移动6 - 2 = 4 位。\n" + 
			" \n" + 
			"\n" + 
			"3. 模式串向右移动4位后，发现C处再度失配，因为此时已经匹配了2个字符（AB），且上一位字符B对应的最大长度值为0，所以向右移动：2 - 0 =2 位。\n" + 
			" \n" + 
			"\n" + 
			"4. A与空格失配，向右移动1 位。\n" + 
			" \n" + 
			"\n" + 
			"5. 继续比较，发现D与C 失配，故向右移动的位数为：已匹配的字符数6减去上一位字符B对应的最大长度2，即向右移动6 - 2 = 4 位。\n" + 
			" \n" + 
			"\n" + 
			"6. 经历第5步后，发现匹配成功，过程结束。\n" + 
			" \n" + 
			"\n" + 
			"    通过上述匹配过程可以看出，问题的关键就是寻找模式串中最大长度的相同前缀和后缀，找到了模式串中每个字符之前的前缀和后缀公共部分的最大长度后，便可基于此匹配。而这个最大长度便正是next 数组要表达的含义。\n" + 
			"\n" + 
			"3.3.3 根据《最大长度表》求next 数组\n" + 
			"\n" + 
			"    由上文，我们已经知道，字符串“ABCDABD”各个前缀后缀的最大公共元素长度分别为：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    而且，根据这个表可以得出下述结论\n" + 
			"\n" + 
			"失配时，模式串向右移动的位数为：已匹配字符数 - 失配字符的上一位字符所对应的最大长度值\n" + 
			"    上文利用这个表和结论进行匹配时，我们发现，当匹配到一个字符失配时，其实没必要考虑当前失配的字符，更何况我们每次失配时，都是看的失配字符的上一位字符对应的最大长度值。如此，便引出了next 数组。\n" + 
			"\n" + 
			"    给定字符串“ABCDABD”，可求得它的next 数组如下：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    把next 数组跟之前求得的最大长度表对比后，不难发现，next 数组相当于“最大长度值” 整体向右移动一位，然后初始值赋为-1。意识到了这一点，你会惊呼原来next 数组的求解竟然如此简单：就是找最大对称长度的前缀后缀，然后整体右移一位，初值赋为-1（当然，你也可以直接计算某个字符对应的next值，就是看这个字符之前的字符串中有多大长度的相同前缀后缀）。\n" + 
			"\n" + 
			"    换言之，对于给定的模式串：ABCDABD，它的最大长度表及next 数组分别如下：\n" + 
			"\n" + 
			"\n" + 
			"\n" + 
			"    根据最大长度表求出了next 数组后，从而有\n" + 
			"\n" + 
			"失配时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值\n" + 
			"    而后，你会发现，无论是基于《最大长度表》的匹配，还是基于next 数组的匹配，两者得出来的向右移动的位数是一样的。为什么呢？因为：\n" + 
			"\n" + 
			"根据《最大长度表》，失配时，模式串向右移动的位数 = 已经匹配的字符数 - 失配字符的上一位字符的最大长度值\n" + 
			"而根据《next 数组》，失配时，模式串向右移动的位数 = 失配字符的位置 - 失配字符对应的next 值\n" + 
			"其中，从0开始计数时，失配字符的位置 = 已经匹配的字符数（失配字符不计数），而失配字符对应的next 值 = 失配字符的上一位字符的最大长度值，两相比较，结果必然完全一致。\n" + 
			"    所以，你可以把《最大长度表》看做是next 数组的雏形，甚至就把它当做next 数组也是可以的，区别不过是怎么用的问题。\n" + 
			"\n" + 
			"3.3.4 通过代码递推计算next 数组\n" + 
			"\n" + 
			"    接下来，咱们来写代码求下next 数组。\n" + 
			"\n" + 
			"    基于之前的理解，可知计算next 数组的方法可以采用递推：\n" + 
			"\n" + 
			"1. 如果对于值k，已有p0 p1, ..., pk-1 = pj-k pj-k+1, ..., pj-1，相当于next[j] = k。\n" + 
			"此意味着什么呢？究其本质，next[j] = k 代表p[j] 之前的模式串子串中，有长度为k 的相同前缀和后缀。有了这个next 数组，在KMP匹配中，当模式串中j 处的字符失配时，下一步用next[j]处的字符继续跟文本串匹配，相当于模式串向右移动j - next[j] 位。\n" + 
			"举个例子，如下图，根据模式串“ABCDABD”的next 数组可知失配位置的字符D对应的next 值为2，代表字符D前有长度为2的相同前缀和后缀（这个相同的前缀后缀即为“AB”），失配后，模式串需要向右移动j - next [j] = 6 - 2 =4位。\n" + 
			"\n" + 
			"\n" + 
			"\n" + 
			"向右移动4位后，模式串中的字符C继续跟文本串匹配。\n" + 
			"\n" + 
			" \n" + 
			"2. 下面的问题是：已知next [0, ..., j]，如何求出next [j + 1]呢？\n" + 
			"    对于P的前j+1个序列字符：\n" + 
			"\n" + 
			"若p[k] == p[j]，则next[j + 1 ] = next [j] + 1 = k + 1；\n" + 
			"若p[k ] ≠ p[j]，如果此时p[ next[k] ] == p[j ]，则next[ j + 1 ] =  next[k] + 1，否则继续递归前缀索引k = next[k]，而后重复此过程。 相当于在字符p[j+1]之前不存在长度为k+1的前缀\"p0 p1, …, pk-1 pk\"跟后缀“pj-k pj-k+1, …, pj-1 pj\"相等，那么是否可能存在另一个值t+1 < k+1，使得长度更小的前缀 “p0 p1, …, pt-1 pt” 等于长度更小的后缀 “pj-t pj-t+1, …, pj-1 pj” 呢？如果存在，那么这个t+1 便是next[ j+1]的值，此相当于利用已经求得的next 数组（next [0, ..., k, ..., j]）进行P串前缀跟P串后缀的匹配。\n" + 
			"   一般的文章或教材可能就此一笔带过，但大部分的初学者可能还是不能很好的理解上述求解next 数组的原理，故接下来，我再来着重说明下。\n" + 
			"\n" + 
			"    如下图所示，假定给定模式串ABCDABCE，且已知next [j] = k（相当于“p0 pk-1” = “pj-k pj-1” = AB，可以看出k为2），现要求next [j + 1]等于多少？因为pk = pj = C，所以next[j + 1] = next[j] + 1 = k + 1（可以看出next[j + 1] = 3）。代表字符E前的模式串中，有长度k+1 的相同前缀后缀。\n" + 
			"\n" + 
			"\n" + 
			"    但如果pk != pj 呢？说明“p0 pk-1 pk”  ≠ “pj-k pj-1 pj”。换言之，当pk != pj后，字符E前有多大长度的相同前缀后缀呢？很明显，因为C不同于D，所以ABC 跟 ABD不相同，即字符E前的模式串没有长度为k+1的相同前缀后缀，也就不能再简单的令：next[j + 1] = next[j] + 1 。所以，咱们只能去寻找长度更短一点的相同前缀后缀。\n" + 
			"\n" + 
			"\n" + 
			"    结合上图来讲，若能在前缀“ p0 pk-1 pk ” 中不断的递归前缀索引k = next [k]，找到一个字符pk’ 也为D，代表pk’ = pj，且满足p0 pk'-1 pk' = pj-k' pj-1 pj，则最大相同的前缀后缀长度为k' + 1，从而next [j + 1] = k’ + 1 = next [k' ] + 1。否则前缀中没有D，则代表没有相同的前缀后缀，next [j + 1] = 0。\n" + 
			"\n" + 
			"    那为何递归前缀索引k = next[k]，就能找到长度更短的相同前缀后缀呢？这又归根到next数组的含义。我们拿前缀 p0 pk-1 pk 去跟后缀pj-k pj-1 pj匹配，如果pk 跟pj 失配，下一步就是用p[next[k]] 去跟pj 继续匹配，如果p[ next[k] ]跟pj还是不匹配，则需要寻找长度更短的相同前缀后缀，即下一步用p[ next[ next[k] ] ]去跟pj匹配。此过程相当于模式串的自我匹配，所以不断的递归k = next[k]，直到要么找到长度更短的相同前缀后缀，要么没有长度更短的相同前缀后缀。如下图所示：\n" + 
			"\n" + 
			"    \n" + 
			"\n" + 
			"引用下一读者wudehua55555于本文评论下留言，以辅助大家从另一个角度理解：“ 一直以为博主在用递归求next数组时没讲清楚，为何要用k = next[k],仔细看了这个红黄蓝分区图才突然恍然大悟，就是找到p[k]对应的next[k]，根据对称性，只需再判断p[next[k]]与p[j]是否相等即可，于是令k = next[k],这里恰好就使用了递归的思路。其实我觉得不要一开始就陷入递归的方法中，换一种思路，直接从考虑对称性入手，可直接得出k = next[k]，而这正好是递归罢了。以上是一些个人看法，非常感谢博主提供的解析，非计算机的学生也能看懂，虽然从昨晚9点看到了现在。高兴。”\n" + 
			"\n" + 
			"    所以，因最终在前缀ABC中没有找到D，故E的next 值为0：\n" + 
			"\n" + 
			"模式串的后缀：ABDE\n" + 
			"模式串的前缀：ABC\n" + 
			"前缀右移两位：     ABC\n" + 
			"    读到此，有的读者可能又有疑问了，那能否举一个能在前缀中找到字符D的例子呢？OK，咱们便来看一个能在前缀中找到字符D的例子，如下图所示：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    给定模式串DABCDABDE，我们很顺利的求得字符D之前的“DABCDAB”的各个子串的最长相同前缀后缀的长度分别为0 0 0 0 1 2 3，但当遍历到字符D，要求包括D在内的“DABCDABD”最长相同前缀后缀时，我们发现pj处的字符D跟pk处的字符C不一样，换言之，前缀DABC的最后一个字符C 跟后缀DABD的最后一个字符D不相同，所以不存在长度为4的相同前缀后缀。\n" + 
			"\n" + 
			"    怎么办呢？既然没有长度为4的相同前缀后缀，咱们可以寻找长度短点的相同前缀后缀，最终，因在p0处发现也有个字符D，p0 = pj，所以p[j]对应的长度值为1，相当于E对应的next 值为1（即字符E之前的字符串“DABCDABD”中有长度为1的相同前缀和后缀）。\n" + 
			"\n" + 
			"    综上，可以通过递推求得next 数组，代码如下所示：\n" + 
			"\n" + 
			"void GetNext(char* p,int next[])\n" + 
			"{\n" + 
			"	int pLen = strlen(p);\n" + 
			"	next[0] = -1;\n" + 
			"	int k = -1;\n" + 
			"	int j = 0;\n" + 
			"	while (j < pLen - 1)\n" + 
			"	{\n" + 
			"		//p[k]表示前缀，p[j]表示后缀\n" + 
			"		if (k == -1 || p[j] == p[k]) \n" + 
			"		{\n" + 
			"			++k;\n" + 
			"			++j;\n" + 
			"			next[j] = k;\n" + 
			"		}\n" + 
			"		else \n" + 
			"		{\n" + 
			"			k = next[k];\n" + 
			"		}\n" + 
			"	}\n" + 
			"}\n" + 
			"    用代码重新计算下“ABCDABD”的next 数组，以验证之前通过“最长相同前缀后缀长度值右移一位，然后初值赋为-1”得到的next 数组是否正确，计算结果如下表格所示：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    从上述表格可以看出，无论是之前通过“最长相同前缀后缀长度值右移一位，然后初值赋为-1”得到的next 数组，还是之后通过代码递推计算求得的next 数组，结果是完全一致的。\n" + 
			"\n" + 
			"3.3.5 基于《next 数组》匹配\n" + 
			"\n" + 
			"    下面，我们来基于next 数组进行匹配。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    还是给定文本串“BBC ABCDAB ABCDABCDABDE”，和模式串“ABCDABD”，现在要拿模式串去跟文本串匹配，如下图所示：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    在正式匹配之前，让我们来再次回顾下上文2.1节所述的KMP算法的匹配流程：\n" + 
			"\n" + 
			"“假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置\n" + 
			"如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；\n" + 
			"如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。\n" + 
			"换言之，当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值，即移动的实际位数为：j - next[j]，且此值大于等于1。”\n" + 
			"1. 最开始匹配时\n" + 
			"P[0]跟S[0]匹配失败\n" + 
			"所以执行“如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]”，所以j = -1，故转而执行“如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++”，得到i = 1，j = 0，即P[0]继续跟S[1]匹配。\n" + 
			"P[0]跟S[1]又失配，j再次等于-1，i、j继续自增，从而P[0]跟S[2]匹配。\n" + 
			"P[0]跟S[2]失配后，P[0]又跟S[3]匹配。\n" + 
			"P[0]跟S[3]再失配，直到P[0]跟S[4]匹配成功，开始执行此条指令的后半段：“如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++”。\n" + 
			"\n" + 
			"2. P[1]跟S[5]匹配成功，P[2]跟S[6]也匹配成功, ...，直到当匹配到P[6]处的字符D时失配（即S[10] != P[6]），由于P[6]处的D对应的next 值为2，所以下一步用P[2]处的字符C继续跟S[10]匹配，相当于向右移动：j - next[j] = 6 - 2 =4 位。\n" + 
			" \n" + 
			"\n" + 
			"3. 向右移动4位后，P[2]处的C再次失配，由于C对应的next值为0，所以下一步用P[0]处的字符继续跟S[10]匹配，相当于向右移动：j - next[j] = 2 - 0 = 2 位。\n" + 
			" \n" + 
			"\n" + 
			"4. 移动两位之后，A 跟空格不匹配，模式串后移1 位。\n" + 
			" \n" + 
			"\n" + 
			"5. P[6]处的D再次失配，因为P[6]对应的next值为2，故下一步用P[2]继续跟文本串匹配，相当于模式串向右移动 j - next[j] = 6 - 2 = 4 位。\n" + 
			"\n" + 
			"6. 匹配成功，过程结束。\n" + 
			" \n" + 
			"\n" + 
			"    匹配过程一模一样。也从侧面佐证了，next 数组确实是只要将各个最大前缀后缀的公共元素的长度值右移一位，且把初值赋为-1 即可。\n" + 
			"\n" + 
			"3.3.6 基于《最大长度表》与基于《next 数组》等价\n" + 
			"\n" + 
			"    我们已经知道，利用next 数组进行匹配失配时，模式串向右移动 j - next [ j ] 位，等价于已匹配字符数 - 失配字符的上一位字符所对应的最大长度值。原因是：\n" + 
			"\n" + 
			"j 从0开始计数，那么当数到失配字符时，j 的数值就是已匹配的字符数；\n" + 
			"由于next 数组是由最大长度值表整体向右移动一位（且初值赋为-1）得到的，那么失配字符的上一位字符所对应的最大长度值，即为当前失配字符的next 值。\n" + 
			"    但为何本文不直接利用next 数组进行匹配呢？因为next 数组不好求，而一个字符串的前缀后缀的公共元素的最大长度值很容易求。例如若给定模式串“ababa”，要你快速口算出其next 数组，乍一看，每次求对应字符的next值时，还得把该字符排除之外，然后看该字符之前的字符串中有最大长度为多大的相同前缀后缀，此过程不够直接。而如果让你求其前缀后缀公共元素的最大长度，则很容易直接得出结果：0 0 1 2 3，如下表格所示：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    然后这5个数字 全部整体右移一位，且初值赋为-1，即得到其next 数组：-1 0 0 1 2。\n" + 
			"\n" + 
			"3.3.7 Next 数组与有限状态自动机\n" + 
			"\n" + 
			"    next 负责把模式串向前移动，且当第j位不匹配的时候，用第next[j]位和主串匹配，就像打了张“表”。此外，next 也可以看作有限状态自动机的状态，在已经读了多少字符的情况下，失配后，前面读的若干个字符是有用的。\n" + 
			"\n" + 
			"\n" + 
			"\n" + 
			"3.3.8 Next 数组的优化\n" + 
			"\n" + 
			"   行文至此，咱们全面了解了暴力匹配的思路、KMP算法的原理、流程、流程之间的内在逻辑联系，以及next 数组的简单求解（《最大长度表》整体右移一位，然后初值赋为-1）和代码求解，最后基于《next 数组》的匹配，看似洋洋洒洒，清晰透彻，但以上忽略了一个小问题。\n" + 
			"\n" + 
			"    比如，如果用之前的next 数组方法求模式串“abab”的next 数组，可得其next 数组为-1 0 0 1（0 0 1 2整体右移一位，初值赋为-1），当它跟下图中的文本串去匹配的时候，发现b跟c失配，于是模式串右移j - next[j] = 3 - 1 =2位。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    右移2位后，b又跟c失配。事实上，因为在上一步的匹配中，已经得知p[3] = b，与s[3] = c失配，而右移两位之后，让p[ next[3] ] = p[1] = b 再跟s[3]匹配时，必然失配。问题出在哪呢？\n" + 
			"\n" + 
			"   \n" + 
			"\n" + 
			"    问题出在不该出现p[j] = p[ next[j] ]。为什么呢？理由是：当p[j] != s[i] 时，下次匹配必然是p[ next [j]] 跟s[i]匹配，如果p[j] = p[ next[j] ]，必然导致后一步匹配失败（因为p[j]已经跟s[i]失配，然后你还用跟p[j]等同的值p[next[j]]去跟s[i]匹配，很显然，必然失配），所以不能允许p[j] = p[ next[j ]]。如果出现了p[j] = p[ next[j] ]咋办呢？如果出现了，则需要再次递归，即令next[j] = next[ next[j] ]。\n" + 
			"\n" + 
			"    所以，咱们得修改下求next 数组的代码。\n" + 
			"\n" + 
			"//优化过后的next 数组求法\n" + 
			"void GetNextval(char* p, int next[])\n" + 
			"{\n" + 
			"	int pLen = strlen(p);\n" + 
			"	next[0] = -1;\n" + 
			"	int k = -1;\n" + 
			"	int j = 0;\n" + 
			"	while (j < pLen - 1)\n" + 
			"	{\n" + 
			"		//p[k]表示前缀，p[j]表示后缀  \n" + 
			"		if (k == -1 || p[j] == p[k])\n" + 
			"		{\n" + 
			"			++j;\n" + 
			"			++k;\n" + 
			"			//较之前next数组求法，改动在下面4行\n" + 
			"			if (p[j] != p[k])\n" + 
			"				next[j] = k;   //之前只有这一行\n" + 
			"			else\n" + 
			"				//因为不能出现p[j] = p[ next[j ]]，所以当出现时需要继续递归，k = next[k] = next[next[k]]\n" + 
			"				next[j] = next[k];\n" + 
			"		}\n" + 
			"		else\n" + 
			"		{\n" + 
			"			k = next[k];\n" + 
			"		}\n" + 
			"	}\n" + 
			"}\n" + 
			"    利用优化过后的next 数组求法，可知模式串“abab”的新next数组为：-1 0 -1 0。可能有些读者会问：原始next 数组是前缀后缀最长公共元素长度值右移一位， 然后初值赋为-1而得，那么优化后的next 数组如何快速心算出呢？实际上，只要求出了原始next 数组，便可以根据原始next 数组快速求出优化后的next 数组。还是以abab为例，如下表格所示：\n" + 
			"\n" + 
			"    \n" + 
			"\n" + 
			"    只要出现了p[next[j]] = p[j]的情况，则把next[j]的值再次递归。例如在求模式串“abab”的第2个a的next值时，如果是未优化的next值的话，第2个a对应的next值为0，相当于第2个a失配时，下一步匹配模式串会用p[0]处的a再次跟文本串匹配，必然失配。所以求第2个a的next值时，需要再次递归：next[2] = next[ next[2] ] = next[0] = -1（此后，根据优化后的新next值可知，第2个a失配时，执行“如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符”），同理，第2个b对应的next值为0。\n" + 
			"\n" + 
			"对于优化后的next数组可以发现一点：如果模式串的后缀跟前缀相同，那么它们的next值也是相同的，例如模式串abcabc，它的前缀后缀都是abc，其优化后的next数组为：-1 0 0 -1 0 0，前缀后缀abc的next值都为-1 0 0。\n" + 
			"\n" + 
			"    然后引用下之前3.1节的KMP代码：\n" + 
			"\n" + 
			"int KmpSearch(char* s, char* p)\n" + 
			"{\n" + 
			"	int i = 0;\n" + 
			"	int j = 0;\n" + 
			"	int sLen = strlen(s);\n" + 
			"	int pLen = strlen(p);\n" + 
			"	while (i < sLen && j < pLen)\n" + 
			"	{\n" + 
			"		//①如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++    \n" + 
			"		if (j == -1 || s[i] == p[j])\n" + 
			"		{\n" + 
			"			i++;\n" + 
			"			j++;\n" + 
			"		}\n" + 
			"		else\n" + 
			"		{\n" + 
			"			//②如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]    \n" + 
			"			//next[j]即为j所对应的next值      \n" + 
			"			j = next[j];\n" + 
			"		}\n" + 
			"	}\n" + 
			"	if (j == pLen)\n" + 
			"		return i - j;\n" + 
			"	else\n" + 
			"		return -1;\n" + 
			"}\n" + 
			"    接下来，咱们继续拿之前的例子说明，整个匹配过程如下：\n" + 
			"\n" + 
			"    1. S[3]与P[3]匹配失败。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    2. S[3]保持不变，P的下一个匹配位置是P[next[3]]，而next[3]=0，所以P[next[3]]=P[0]与S[3]匹配。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    3.  由于上一步骤中P[0]与S[3]还是不匹配。此时i=3，j=next [0]=-1，由于满足条件j==-1，所以执行“++i, ++j”，即主串指针下移一个位置，P[0]与S[4]开始匹配。最后j==pLen，跳出循环，输出结果i - j = 4（即模式串第一次在文本串中出现的位置），匹配成功，算法结束。\n" + 
			"\n" + 
			"   \n" + 
			"\n" + 
			"3.4 KMP的时间复杂度分析\n" + 
			"    相信大部分读者读完上文之后，已经发觉其实理解KMP非常容易，无非是循序渐进把握好下面几点：\n" + 
			"\n" + 
			"如果模式串中存在相同前缀和后缀，即pj-k pj-k+1, ..., pj-1 = p0 p1, ..., pk-1，那么在pj跟si失配后，让模式串的前缀p0 p1...pk-1对应着文本串si-k si-k+1...si-1，而后让pk跟si继续匹配。\n" + 
			"之前本应是pj跟si匹配，结果失配了，失配后，令pk跟si匹配，相当于j 变成了k，模式串向右移动j - k位。\n" + 
			"因为k 的值是可变的，所以我们用next[j]表示j处字符失配后，下一次匹配模式串应该跳到的位置。换言之，失配前是j，pj跟si失配时，用p[ next[j] ]继续跟si匹配，相当于j变成了next[j]，所以，j = next[j]，等价于把模式串向右移动j - next [j] 位。\n" + 
			"而next[j]应该等于多少呢？next[j]的值由j 之前的模式串子串中有多大长度的相同前缀后缀所决定，如果j 之前的模式串子串中（不含j）有最大长度为k的相同前缀后缀，那么next [j] = k。\n" + 
			"    如之前的图所示：\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    接下来，咱们来分析下KMP的时间复杂度。分析之前，先来回顾下KMP匹配算法的流程：\n" + 
			"\n" + 
			"“KMP的算法流程：\n" + 
			"\n" + 
			"假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置\n" + 
			"如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；\n" + 
			"如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。”\n" + 
			"    我们发现如果某个字符匹配成功，模式串首字符的位置保持不动，仅仅是i++、j++；如果匹配失配，i 不变（即 i 不回溯），模式串会跳过匹配过的next [j]个字符。整个算法最坏的情况是，当模式串首字符位于i - j的位置时才匹配成功，算法结束。\n" + 
			"    所以，如果文本串的长度为n，模式串的长度为m，那么匹配过程的时间复杂度为O(n)，算上计算next的O(m)时间，KMP的整体时间复杂度为O(m + n)。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"4. 扩展1：BM算法\n" + 
			"    KMP的匹配是从模式串的开头开始匹配的，而1977年，德克萨斯大学的Robert S. Boyer教授和J Strother Moore教授发明了一种新的字符串匹配算法：Boyer-Moore算法，简称BM算法。该算法从模式串的尾部开始匹配，且拥有在最坏情况下O(N)的时间复杂度。在实践中，比KMP算法的实际效能高。\n" + 
			"\n" + 
			"    BM算法定义了两个规则：\n" + 
			"\n" + 
			"坏字符规则：当文本串中的某个字符跟模式串的某个字符不匹配时，我们称文本串中的这个失配字符为坏字符，此时模式串需要向右移动，移动的位数 = 坏字符在模式串中的位置 - 坏字符在模式串中最右出现的位置。此外，如果\"坏字符\"不包含在模式串之中，则最右出现位置为-1。\n" + 
			"好后缀规则：当字符失配时，后移位数 = 好后缀在模式串中的位置 - 好后缀在模式串上一次出现的位置，且如果好后缀在模式串中没有再次出现，则为-1。\n" + 
			"    下面举例说明BM算法。例如，给定文本串“HERE IS A SIMPLE EXAMPLE”，和模式串“EXAMPLE”，现要查找模式串是否在文本串中，如果存在，返回模式串在文本串中的位置。\n" + 
			"\n" + 
			"    1. 首先，\"文本串\"与\"模式串\"头部对齐，从尾部开始比较。\"S\"与\"E\"不匹配。这时，\"S\"就被称为\"坏字符\"（bad character），即不匹配的字符，它对应着模式串的第6位。且\"S\"不包含在模式串\"EXAMPLE\"之中（相当于最右出现位置是-1），这意味着可以把模式串后移6-(-1)=7位，从而直接移到\"S\"的后一位。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    2. 依然从尾部开始比较，发现\"P\"与\"E\"不匹配，所以\"P\"是\"坏字符\"。但是，\"P\"包含在模式串\"EXAMPLE\"之中。因为“P”这个“坏字符”对应着模式串的第6位（从0开始编号），且在模式串中的最右出现位置为4，所以，将模式串后移6-4=2位，两个\"P\"对齐。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    3. 依次比较，得到 “MPLE”匹配，称为\"好后缀\"（good suffix），即所有尾部匹配的字符串。注意，\"MPLE\"、\"PLE\"、\"LE\"、\"E\"都是好后缀。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    4. 发现“I”与“A”不匹配：“I”是坏字符。如果是根据坏字符规则，此时模式串应该后移2-(-1)=3位。问题是，有没有更优的移法？\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    5. 更优的移法是利用好后缀规则：当字符失配时，后移位数 = 好后缀在模式串中的位置 - 好后缀在模式串中上一次出现的位置，且如果好后缀在模式串中没有再次出现，则为-1。\n" + 
			"    所有的“好后缀”（MPLE、PLE、LE、E）之中，只有“E”在“EXAMPLE”的头部出现，所以后移6-0=6位。\n" + 
			"    可以看出，“坏字符规则”只能移3位，“好后缀规则”可以移6位。每次后移这两个规则之中的较大值。这两个规则的移动位数，只与模式串有关，与原文本串无关。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    6. 继续从尾部开始比较，“P”与“E”不匹配，因此“P”是“坏字符”，根据“坏字符规则”，后移 6 - 4 = 2位。因为是最后一位就失配，尚未获得好后缀。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"    由上可知，BM算法不仅效率高，而且构思巧妙，容易理解。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"5. 扩展2：Sunday算法\n" + 
			"    上文中，我们已经介绍了KMP算法和BM算法，这两个算法在最坏情况下均具有线性的查找时间。但实际上，KMP算法并不比最简单的c库函数strstr()快多少，而BM算法虽然通常比KMP算法快，但BM算法也还不是现有字符串查找算法中最快的算法，本文最后再介绍一种比BM算法更快的查找算法即Sunday算法。\n" + 
			"\n" + 
			"    Sunday算法由Daniel M.Sunday在1990年提出，它的思想跟BM算法很相似：\n" + 
			"\n" + 
			"只不过Sunday算法是从前往后匹配，在匹配失败时关注的是文本串中参加匹配的最末位字符的下一位字符。\n" + 
			"如果该字符没有在模式串中出现则直接跳过，即移动位数 = 匹配串长度 + 1；\n" + 
			"否则，其移动位数 = 模式串中最右端的该字符到末尾的距离+1。\n" + 
			"    下面举个例子说明下Sunday算法。假定现在要在文本串\"substring searching algorithm\"中查找模式串\"search\"。\n" + 
			"\n" + 
			"    1. 刚开始时，把模式串与文本串左边对齐：\n" + 
			"substring searching algorithm\n" + 
			"search\n" + 
			"^\n" + 
			"    2. 结果发现在第2个字符处发现不匹配，不匹配时关注文本串中参加匹配的最末位字符的下一位字符，即标粗的字符 i，因为模式串search中并不存在i，所以模式串直接跳过一大片，向右移动位数 = 匹配串长度 + 1 = 6 + 1 = 7，从 i 之后的那个字符（即字符n）开始下一步的匹配，如下图：\n" + 
			"\n" + 
			"substring searching algorithm\n" + 
			"　　　 search\n" + 
			"　　　　^\n" + 
			"    3. 结果第一个字符就不匹配，再看文本串中参加匹配的最末位字符的下一位字符，是'r'，它出现在模式串中的倒数第3位，于是把模式串向右移动3位（r 到模式串末尾的距离 + 1 = 2 + 1 =3），使两个'r'对齐，如下：\n" + 
			"substring searching algorithm\n" + 
			"　　　　  search\n" + 
			"　　　　　　　^\n" + 
			"\n" + 
			"    4. 匹配成功。\n" + 
			"\n" + 
			"    回顾整个过程，我们只移动了两次模式串就找到了匹配位置，缘于Sunday算法每一步的移动量都比较大，效率很高。完。\n" + 
			"\n" + 
			" \n" + 
			"\n" + 
			"6. 参考文献\n" + 
			"《算法导论》的第十二章：字符串匹配；\n" + 
			"本文中模式串“ABCDABD”的部分图来自于此文：http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html；\n" + 
			"本文3.3.7节中有限状态自动机的图由微博网友@龚陆安 绘制：http://d.pr/i/NEiz；\n" + 
			"北京7月暑假班邹博半小时KMP视频：http://www.julyedu.com/video/play/id/5；\n" + 
			"北京7月暑假班邹博第二次课的PPT：http://yun.baidu.com/s/1mgFmw7u；\n" + 
			"理解KMP 的9张PPT：http://weibo.com/1580904460/BeCCYrKz3#_rnd1405957424876；\n" + 
			"详解KMP算法（多图）：http://www.cnblogs.com/yjiyjige/p/3263858.html；\n" + 
			"本文第4部分的BM算法参考自此文：http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html；\n" + 
			"http://youlvconglin.blog.163.com/blog/static/5232042010530101020857；\n" + 
			"《数据结构 第二版》，严蔚敏 & 吴伟民编著；\n" + 
			"http://blog.csdn.net/v_JULY_v/article/details/6545192；\n" + 
			"http://blog.csdn.net/v_JULY_v/article/details/6111565；\n" + 
			"Sunday算法的原理与实现：http://blog.chinaunix.net/uid-22237530-id-1781825.html；\n" + 
			"模式匹配之Sunday算法：http://blog.csdn.net/sunnianzhong/article/details/8820123；\n" + 
			"一篇KMP的英文介绍：http://www.inf.fh-flensburg.de/lang/algorithmen/pattern/kmpen.htm；\n" + 
			"我2014年9月3日在西安电子科大的面试&算法讲座视频（第36分钟~第94分钟讲KMP）：http://www.julyedu.com/video/play/21；\n" + 
			"一幅图理解KMP next数组的求法：http://v.atob.site/kmp-next.html\n" + 
			" \n" + 
			"\n" + 
			"7. 后记    \n" + 
			"    对之前混乱的文章给广大读者带来的困扰表示致歉，对重新写就后的本文即将给读者带来的清晰表示欣慰。希望大部分的初学者，甚至少部分的非计算机专业读者也能看懂此文。有任何问题，欢迎随时批评指正，thanks。\n" + 
			"\n" + 
			"    July、二零一四年八月二十二日晚九点。\n" + 
			"\n" + 
			" \n" + 
			"想对作者说点什么\n" + 
			" Eternally831143\n" + 
			"Sqwlly： 写的实在是太好了，博主我可以表明出处转载一下吗！(4天前#264楼)\n" + 
			"0\n" + 
			"malimingwq\n" + 
			"malimingwq： 关于BM算法的好后缀运算，是不是只需要查找好后缀中最后一个字符在除了好后缀的其他字符中查找成功就可以使用查找成功的位置，而不用管好后缀有多少个字符，比如LExxxxxxLE,好后缀中的E的位置 - E在模式串中上一次出现的位置 = 后缀中的LE的位置 - LE在模式串中上一次出现的位置，这样以后用好后缀中最后一个字符求移动距离即可？？？(1周前#263楼)\n" + 
			"0\n" + 
			"baidu_38401528\n" + 
			"owl_just： 感谢博主，清晰易懂!(3周前#262楼)\n" + 
			"0\n" + 
			"xiuaxiu\n" + 
			"xiuaxiu： 3.3节最后的几张图没了(1个月前#261楼)查看回复(1)\n" + 
			"0\n" + 
			"qq_35923749\n" + 
			"凌凌小博客： 666，搞了好几天了，又是看视频又是查看各种博客，看到你这篇才真正理解求解kmp算法各个步骤的原理，感谢大佬(3个月前#260楼)\n" + 
			"0\n" + 
			"a792245795\n" + 
			"a792245795： https://blog.csdn.net/x__1998/article/details/79951598 我觉得还是用递归思想理解更清晰一些，关键是要理解k=next[k];其实实在将另一个串本身做为子串在做匹配，相当于这一步也是用kmp算法在做匹配，这样代码理解起来或许更容易一些。(3个月前#259楼)\n" + 
			"0\n" + 
			"swustzhaoxingda\n" + 
			"wind_bow： 这是我第一次真正意义上的理解KMP 感谢JULY(3个月前#258楼)\n" + 
			"0\n" + 
			"I_O_fly\n" + 
			"I_O_fly： KMP大一就接触了一直不是很明白，现在看了你的博客突然顿悟了，感觉思路清晰了谢谢大佬！！！！！(4个月前#257楼)\n" + 
			"0\n" + 
			"iamluole\n" + 
			"肉肉的RORO： 为什么在求next[j+1]时，只能不断的减小k，而不是增大k?换句话说，是否有可能存在一个 t(k&lt;t&lt;j-1)，使得P[0], ... ,P[t] = P[j-k-t]...P[j]，却被现在的递归算法视为P[j+1]=0?(4个月前#256楼)\n" + 
			"0\n" + 
			"github_36301064\n" + 
			"WolfArya： 多谢分享呢，现在好多kmp的解释太敷衍了，看您这一篇终于看懂了，谢谢！(4个月前#255楼)\n" + 
			"0\n" + 
			"codeswarrior\n" + 
			"一只二十四节气： 请问next[]数组的next[0]=-1如何理解(4个月前#254楼)\n" + 
			"0\n" + 
			"qq_42594924\n" + 
			"qq_42594924： 为什么我按照这种算的和书上算的不一样(5个月前#253楼)\n" + 
			"0\n" + 
			"qq_40734763\n" + 
			"qq_40734763： 我还是觉得你一直在强调那几个公式，反复的强调，一直在用，最后让我们懂得原理，其实并没有推导过程。。。(5个月前#252楼)\n" + 
			"0\n" + 
			"ilinxiao\n" + 
			"ilinxiao： 非常感谢july的讲解，让我搞懂了KMP算法。我觉得自己在学习的过程中，分成了三个阶段，跟大家分享一下。第一个阶段，看到一篇这么长的信息量这么大的文章和那一连串的P0 P1 Pj-1 Pj的描述是有点茫然的，完全不知所云。可我知道作者肯定是言之有物，必须要花时间搞懂，为后面算法的学习奠定基础。至于P0 Pj这些描述方式读懂之后才发现这真的是再严谨不过的描述方式。第二个阶段，是能够全部看懂看明白了，并且对作者为我们能够更好的读懂，对文章做的精心拆解心生佩服。在此再表示感谢！第三个阶段，是自己尝试者凭自己的理解去用代码实现。这还是遇到了一点问题，毕竟这才是真正考验自己是不是真的理解了整个算法的逻辑。开始，还是没有搞懂next数组的实现方式，所以代码写不出来。然后，用最笨的方法，逐步的代入i，j变量的值，逐步推演。这时才真的是柳暗花明了！python版实现代码请参考这里：https://github.com/ilinxiao/oneweek-onealgorithm/tree/master/str_search 跟c++代码有一点点的区别。如果你读完之后也感觉不是完全的理解算法思路，相信结合代码能够帮助大家更好的理解。(6个月前#251楼)查看回复(1)\n" + 
			"0\n" + 
			"weixin_43170684\n" + 
			"information technology： 写的真的好啊 看了两个多小时把原理看懂了 感谢博主(6个月前#250楼)\n" + 
			"0\n" + 
			"查看 437 条热评\n" + 
			"KMP算法最浅显理解——一看就明白\n" + 
			"阅读数 18万+\n" + 
			"\n" + 
			"说明KMP算法看懂了觉得特别简单，思路很简单，看不懂之前，查各种资料，看的稀里糊涂，即使网上最简单的解释，依然看的稀里糊涂。我花了半天时间，争取用最短的篇幅大致搞明白这玩意到底是啥。这里不扯概念，只讲...\n" + 
			"博文\n" + 
			"来自：	好记性不如烂笔头的专栏\n" + 
			"KMP动图详解+模板\n" + 
			"阅读数 1268\n" + 
			"\n" + 
			"此文章转自dalao博客：http://www.cnblogs.com/SYCstudio/p/7194315.html谭dalao讲的时候，前半部分听懂了，最后那点听了好几遍还是没全懂，在网上看了好...\n" + 
			"博文\n" + 
			"来自：	lxt_Lucia的博客\n" + 
			"KMP算法——很详细的讲解\n" + 
			"阅读数 3805\n" + 
			"\n" + 
			"KMP算法（研究总结，字符串）KMP算法（研究总结，字符串）前段时间学习KMP算法，感觉有些复杂，不过好歹是弄懂啦，简单地记录一下，方便以后自己回忆。引入首先我们来看一个例子，现在有两个字符串A和B，...\n" + 
			"博文\n" + 
			"来自：	霜雪千年\n" + 
			"KMP\n" + 
			"阅读数 489\n" + 
			"\n" + 
			"首先来写最大公共前缀和后缀，这里pa代表要找的字符串，p表示pa字符串里的每个位置的最大公共前缀和后缀表#include&amp;lt;bits/stdc++.h&amp;gt;usingnamesp...\n" + 
			"博文\n" + 
			"来自：	Mr臣的博客\n" + 
			"KMP ~~从入门到理解到彻底理解\n" + 
			"阅读数 1192\n" + 
			"\n" + 
			"看了好久的KMP没看懂，但是碰见大佬的博客，突然顿悟，给大家分享一下。原文：https://blog.csdn.net/v_july_v/article/details/7041827        ...\n" + 
			"博文\n" + 
			"来自：	gao506440410的博客\n" + 
			"KMP算法详解\n" + 
			"阅读数 22万+\n" + 
			"\n" + 
			"kmp算法又称“看毛片”算法，是一个效率非常高的字符串匹配算法。不过由于其难以理解，所以在很长的一段时间内一直没有搞懂。虽然网上有很多资料，但是鲜见好的博客能简单明了地将其讲清楚。在此，综合网上比较好...\n" + 
			"博文\n" + 
			"来自：	姚光超的专栏\n" + 
			"小白之KMP算法详解及python实现\n" + 
			"阅读数 885\n" + 
			"\n" + 
			"在看子串匹配问题的时候，书上的关于KMP的算法的介绍总是理解不了。看了一遍代码总是很快的忘掉，后来决定好好分解一下KMP算法，算是给自己加深印象。-------------------------分割...\n" + 
			"博文\n" + 
			"来自：	ZhangXiang\n" + 
			"KMP入门级别算法详解--终于解决了（next数组详解）\n" + 
			"阅读数 4万+\n" + 
			"\n" + 
			"对于正常的字符串模式匹配，主串长度为m，子串为n，时间复杂度会到达O（m*n），而如果用KMP算法，复杂度将会减少线型时间O（m+n）。 设主串为ptr=&quot;ababaaababaa&quot...\n" + 
			"博文\n" + 
			"来自：	Lee的博客\n" + 
			"kmp\n" + 
			"阅读数 327\n" + 
			"\n" + 
			"/*pku3461(Oulipo),hdu1711(NumberSequence)这个模板字符串是从0开始的Next数组是从1开始的求T串是否为S串的子串主串为abdabdabcS串模式串abdabc...\n" + 
			"博文\n" + 
			"来自：	一个弱鸡的博客\n" + 
			"kmp算法(最简单最直观的理解，看完包会）\n" + 
			"阅读数 838\n" + 
			"\n" + 
			"本文将以特殊的方式来让人们更好地理解kmp算法，不包括kmp算法的推导，接下来，我们将从朴素算法出发。在这之前，我们先设主串为S，模式串为T，我们要解决的询问是主串中是否包含模式串(即T是否为S的字串...\n" + 
			"博文\n" + 
			"来自：	u014390156的博客\n" + 
			" FishBear_move_on关注\n" + 
			"FishBear_move_on\n" + 
			"953篇文章\n" + 
			"\n" + 
			"排名:940\n" + 
			"\n" + 
			"Nabryant关注\n" + 
			"Nabryant\n" + 
			"47篇文章\n" + 
			"\n" + 
			"排名:千里之外\n" + 
			"\n" + 
			"画面太乱了关注\n" + 
			"画面太乱了\n" + 
			"235篇文章\n" + 
			"\n" + 
			"排名:千里之外\n" + 
			"\n" + 
			"_宇宙浪子_关注\n" + 
			"_宇宙浪子_\n" + 
			"364篇文章\n" + 
			"\n" + 
			"排名:千里之外\n" + 
			"\n" + 
			"KMP算法\n" + 
			"阅读数 1282\n" + 
			"\n" + 
			"一、字符串匹配场景KMP算法可以解决以字符串匹配为模型的问题，算法应用场景非常广泛，并不仅仅限于文本的匹配。以简单的字符串匹配为例，现有两个链分别为source和target，要在Source链中匹配...\n" + 
			"博文\n" + 
			"来自：	l577217的博客\n" + 
			"算法 kmp算法\n" + 
			"阅读数 426\n" + 
			"\n" + 
			"kmp算法是改进后的字符匹配算法，它与bf算法的区别是，每次从串与主串匹配失败后，从串与主串匹配的位置不同。下面具体说下这两种算法的区别：主串：BABCDABABCDABCED从串：ABCDABCED...\n" + 
			"博文\n" + 
			"来自：	千田恒月的博客\n" + 
			"终于弄懂KMP算法了\n" + 
			"阅读数 928\n" + 
			"\n" + 
			"1.简例弄懂KMP-点此链接查看看了上面的文章，你肯定大概明白了KMP的运作原理，但是你可能对于文章提到的“部分匹配值”的又来还存在疑惑，那么请继续往下看：我们先抛出两个问题，当目标字符串i指针与模式...\n" + 
			"博文\n" + 
			"来自：	踏雪寻梅\n" + 
			"python 给QQ好友发信息\n" + 
			"阅读数 1万+\n" + 
			"\n" + 
			"python给QQ好友发信息\n" + 
			"博文\n" + 
			"来自：	fallinlovelj的技术专栏\n" + 
			"ArcGIS VS QGIS——两者之间的27点比较上篇（译）\n" + 
			"阅读数 1万+\n" + 
			"\n" + 
			"本文是笔者刚刚接触QGIS相关博客资源时找到的一篇文章，全文比较长，因此分成两篇发布。就内容而言不代表笔者观点，留待后续一一验证。QGIS和ArcGIS的比较你也许伴随着ArcGIS或者QGIS而成长...\n" + 
			"博文\n" + 
			"来自：	番茄园\n" + 
			"next数组两种求法\n" + 
			"阅读数 1万+\n" + 
			"\n" + 
			"（1）第一种求法：根据前一个字符的next值求（2）第二种求法：根据最大公共元素长度求...\n" + 
			"博文\n" + 
			"来自：	粉刷匠\n" + 
			"next数组求解详解\n" + 
			"阅读数 1万+\n" + 
			"\n" + 
			"next数组求解详解，以串'ababaaababaa'为例\n" + 
			"博文\n" + 
			"来自：	BlackSky's Blog\n" + 
			"next数组介绍\n" + 
			"阅读数 1万+\n" + 
			"\n" + 
			"首先看看next数组值的求解方法例如：模式串abaabcacnext值01122312            next数组的求解方法是：第一位的next值为0，第二位的next值为1，后面求解每一位的...\n" + 
			"博文\n" + 
			"来自：	QuitePig的专栏\n" + 
			"串的模式匹配-KMP详解\n" + 
			"阅读数 552\n" + 
			"\n" + 
			"前两个星期在数据结构上学习了KMP，一听说要学KMP就感觉好难，因为上学期在没学数据结构之前实验室有个学姐讲过KMP算法，听的真是云里雾里，不知道next数组到底是干啥的，下去自己也没有学习，所以在前...\n" + 
			"博文\n" + 
			"来自：	别止的博客\n" + 
			"iptables --algo 字符串匹配算法 bm kmp\n" + 
			"阅读数 1621\n" + 
			"\n" + 
			"http://blog.csdn.net/l953972252/article/details/51331001字符串匹配一直是计算机领域热门的研究问题之一，多种算法层出不穷。字符串匹配算法有着很强的...\n" + 
			"博文\n" + 
			"来自：	achejq的专栏\n" + 
			"有趣的算法（四）最通俗易懂的KMP算法解析\n" + 
			"阅读数 354\n" + 
			"\n" + 
			"最通俗易懂的KMP算法解析1.1 算法定义  Knuth-Morris-Pratt字符串查找算法，简称为“KMP算法”，常用于在一个文本串S内查找一个模式串P的出现位置，这个算法由DonaldKnut...\n" + 
			"博文\n" + 
			"来自：	Machine Learning with Peppa\n" + 
			"KMP算法（1）：如何理解KMP\n" + 
			"阅读数 367\n" + 
			"\n" + 
			"一：背景  给定一个主字符串（以S代替）和模式串（以P代替），要求找出P在S中出现的位置，即串的模式匹配问题。今天来介绍解决这一问题的常用算法之一，Knuth-Morris-Pratt算法（简称KMP...\n" + 
			"博文\n" + 
			"来自：	半壶老酒\n" + 
			"算法设计与分析——暴力算法关于KMP算法中next函数的详细解析\n" + 
			"阅读数 89\n" + 
			"\n" + 
			"       以下采用的next数组是从1开始的并且其他情况的赋值为1       借鉴了两篇优秀的文章作为算法设计分析蛮力法下的kmp知识补充        同感，之前看到数据结构中字符串的模式匹配...\n" + 
			"博文\n" + 
			"来自：	qq_37457202的博客\n" + 
			"从头到尾彻底理解KMP（2014年8月22日版）转载\n" + 
			"阅读数 112\n" + 
			"\n" + 
			"从头到尾彻底理解KMP作者：July时间：最初写于2011年12月，2014年7月21日晚10点全部删除重写成此文，随后的半个多月不断反复改进。后收录于新书《编程之法：面试和算法心得》第4.4节中。1...\n" + 
			"博文\n" + 
			"来自：	Nabryant的博客\n" + 
			"从头到尾彻底理解KMP 2014年8月22日版\n" + 
			"阅读数 27\n" + 
			"\n" + 
			"分享一下我老师大神的人工智能教程！零基础，通俗易懂！http://blog.csdn.net/jiangjunshow也欢迎大家转载本篇文章。分享知识，造福人民，实现我们中华民族伟大复兴！&amp;n...\n" + 
			"博文\n" + 
			"来自：	gdfyug的博客\n" + 
			"从头到尾彻底理解KMP（2014年8月22日版）(转载)\n" + 
			"阅读数 207\n" + 
			"\n" + 
			"从头到尾彻底理解KMP作者：July时间：最初写于2011年12月，2014年7月21日晚10点全部删除重写成此文，随后的半个多月不断反复改进。后收录于新书《编程之法：面试和算法心得》第4.4节中。1...\n" + 
			"博文\n" + 
			"来自：	TimeThief_Xuan的专栏\n" + 
			"strstr竟然把KMP还快!\n" + 
			"03-22\n" + 
			"测试了一下在网页源码中查找关键字,结果发现strstr竟然把KMP快几倍...这是为什么论坛\n" + 
			"kmp理解\n" + 
			"阅读数 586\n" + 
			"\n" + 
			"从头到尾彻底理解KMP作者：July时间：最初写于2011年12月，2014年7月21日晚10点全部删除重写成此文，随后的半个多月不断反复改进。~~~~~~~~~~其实我觉得kmp最难理解的是next...\n" + 
			"博文\n" + 
			"来自：	EnderSnowBaby\n" + 
			"KMP算法难以理解部分\n" + 
			"阅读数 415\n" + 
			"\n" + 
			"第一次看KMP算法时，很懵逼，但感觉很牛逼，后面实训时，同学分配到这个算法，看了两天，看了不少文章，终于还是理解到了什么是KMP算法的精髓。首先讲一些简单的概念。为什么会出现KMP算法或者是他的优点是...\n" + 
			"博文\n" + 
			"来自：	搬砖的少年\n" + 
			"kmp算法 入门理解 ＋例题\n" + 
			"阅读数 202\n" + 
			"\n" + 
			"kmp算法是用来解决字符串匹配问题的给定一个str1字符串和str2字符串，看一下str1字符串中是否有str2字符串，这就相当于集合中的包含关系，看一下str1字符串是否包含str2字符串。以下内容...\n" + 
			"博文\n" + 
			"来自：	qq_40938077的博客\n" + 
			"转：kmp算法详解（最透彻的没有之一！）\n" + 
			"阅读数 301\n" + 
			"\n" + 
			"给定一个主串（以S代替）和模式串（以P代替），要求找出P在S中出现的位置，此即串的模式匹配问题。Knuth-Morris-Pratt算法（简称KMP）是解决这一问题的常用算法之一，这个算法是由高德纳（...\n" + 
			"博文\n" + 
			"来自：	Gease_lcj的博客\n" + 
			"为啥要用kmp算法，有什么依据嘛\n" + 
			"阅读数 839\n" + 
			"\n" + 
			"数据量大的时候使用KMP算法，大大加快时间，自不用说啦。O（n）的时间复杂度看了一堆博客介绍。。才懂了：因为字符串的一个字串，串头和串尾可能是重复的，，就是前缀和后缀重合了比如上一排红框左边这个ABC...\n" + 
			"博文\n" + 
			"来自：	章鱼小丸子\n" + 
			"KMP(MP)算法详解\n" + 
			"阅读数 2326\n" + 
			"\n" + 
			"WrittenwithStackEdit.由于CSDN服务器的维护，我迫不得已地用了和CSDN版本相近的StackEdit.KMP算法，是一种字符串匹配的算法。当然，我们已经学过了一两种字符串匹配算法...\n" + 
			"博文\n" + 
			"来自：	算法的设计与应用研究\n" + 
			"KMP算法的前缀next数组最通俗的解释，如果看不懂我也没辙了\n" + 
			"阅读数 5万+\n" + 
			"\n" + 
			"我们在一个母字符串中查找一个子字符串有很多方法。KMP是一种最常见的改进算法，它可以在匹配过程中失配的情况下，有效地多往后面跳几个字符，加快匹配速度。当然我们可以看到这个算法针对的是子串有对称属性，如...\n" + 
			"博文\n" + 
			"来自：	Shawn的专栏\n" + 
			"从头到尾彻底理解KMP\n" + 
			"阅读数 1001\n" + 
			"\n" + 
			"从头到尾彻底理解KMP\n" + 
			"博文\n" + 
			"来自：	倔强不倒翁的博客\n" + 
			"KMP算法及next数组详解\n" + 
			"阅读数 6654\n" + 
			"\n" + 
			"最近整理笔记时，突然翻出几年前理解起来困难无比的看毛片（KMP）算法，笔记中详述了搜索过程，图文并茂，然而在最最重要的next数组部分却是一带而过，于是找出当年的教材，也只是写了getnext()函数...\n" + 
			"博文\n" + 
			"来自：	u012043391的专栏\n" + 
			"[置顶] 从头到尾彻底理解KMP（2014年8月22日版）\n" + 
			"阅读数 497\n" + 
			"\n" + 
			"http://blog.csdn.net/v_july_v/article/details/7041827从头到尾彻底理解KMP作者：July时间：最初写于2011年12月，2014年7月21日晚10...\n" + 
			"博文\n" + 
			"来自：	常思考->有目标->重实践->善反思\n" + 
			"从头到尾彻底理解KMP（2014年8月15日版）\n" + 
			"阅读数 420\n" + 
			"\n" + 
			"从头到尾彻底理解KMP作者：July时间：最初写于2011年12月，2014年7月21日晚10点全部删除重写成此文，随后的半个多月不断反复改进。1.引言  本KMP原文最初写于2年多前的2011年12...\n" + 
			"博文\n" + 
			"来自：	New Star的acm\n" + 
			"从头到尾彻底理解KMP（2014年8月8日版）（转载）\n" + 
			"阅读数 278\n" + 
			"\n" + 
			"从头到尾彻底理解KMP作者：July时间：最初写于2011年12月，2014年7月21日晚10点全部删除重写成此文，随后的半个多月不断反复改进。1.引言  本KMP原文最初写于2年多前的2011年12...\n" + 
			"博文\n" + 
			"来自：	海螺上的斑点\n" + 
			"关于\"从头到尾彻底理解KMP（2014年8月22日版）\"的个人理解\n" + 
			"阅读数 919\n" + 
			"\n" + 
			"原文链接：从头到尾彻底理解KMP（2014年8月22日版）1，此文先求解next数组这里先从直观上来理解，即考虑模式串P的“各个子串的前缀后缀的公共元素的最大长度”容易得到，然后通过右移“各个子串的前...\n" + 
			"博文\n" + 
			"来自：	士心的专栏\n" + 
			"KMP之一：从头到尾彻底理解KMP算法（2014年8月1日版）\n" + 
			"阅读数 520\n" + 
			"\n" + 
			"目录(?)[+]从头到尾彻底理解KMP作者：July时间：最初写于2011年12月，2014年7月21日晚10点全部删除重写成此文。1.引言  本KMP原文最初写于2年多前的2011年12月，因当时初...\n" + 
			"博文\n" + 
			"来自：	jw903的专栏\n" + 
			"扩展KMP的详细理解\n" + 
			"阅读数 4010\n" + 
			"\n" + 
			"扩展KMP的详细理解扩展KMP求的是对于原串S1的每一个后缀子串与模式串S2的最长公共前缀。它有一个next[]数组和一个extend[]数组。next[i]表示为模式串S2中以i为起点的后缀字符串和...\n" + 
			"博文\n" + 
			"来自：	brandong\n" + 
			"扩展KMP\n" + 
			"阅读数 191\n" + 
			"\n" + 
			"关于扩展KMP算法写的比较好的文章： https://segmentfault.com/a/1190000008663857例题：HDU6153题意：每组给你两个字符串s1和s2，求s2的所有后缀在s...\n" + 
			"博文\n" + 
			"来自：	qq_40938077的博客\n" + 
			"Kmp中next数组含义\n" + 
			"阅读数 423\n" + 
			"\n" + 
			"凑个字数这篇分析了Kmp中next数组到底是用来干什么的。文章假定大家已经对字符串匹配算法具有初步了解。但是对kmp中的next不是很懂。如果想要研究更多。可以出门左转https://blog.csd...\n" + 
			"博文\n" + 
			"来自：	TesuZer的博客\n" + 
			"KMP算法实现原理\n" + 
			"阅读数 3809\n" + 
			"\n" + 
			"KMP算法，是由Knuth，Morris，Pratt共同提出的模式匹配算法，其对于任何模式和目标序列，都可以在线性时间内完成匹配查找，而不会发生退化，是一个非常优秀的模式匹配算法。...\n" + 
			"博文\n" + 
			"来自：	caoyan_12727的博客\n" + 
			"理解KMP算法过程\n" + 
			"阅读数 327\n" + 
			"\n" + 
			" 写下这篇文章，希望能够帮助新手快速入门，加深理解。废话不多说，进入正题。 1.一些声明  首先定义一些符号来简化文章 ProblemA代表了【判断一个字符串W是否在一个超大字符串T内出现过】这个问题...\n" + 
			"博文\n" + 
			"来自：	愿岁月如歌\n" + 
			"深度分析kmp算法，从原理到实现（看了必会，简单直观）\n" + 
			"阅读数 252\n" + 
			"\n" + 
			"kmp算法，常用于匹配一个字符串是否是另一个字符串的子串，不同于暴力搜索kmp算法的时间复杂度为O(m+n),网上好多对于该算法的讲解代码，但发现有木有，几乎所有的代码全是一模一样，根本没几个是自己写...\n" + 
			"博文\n" + 
			"来自：	qq_32459653的博客\n" + 
			"串与模式匹配\n" + 
			"阅读数 313\n" + 
			"\n" + 
			"解析：请参考 点击打开链接2-1(neuDS)设主串的长度为n，模式串的长度为m，则串匹配的KMP算法时间复杂度是()。 (2分)O(m)O(n)O(n+m)O(n×m)作者: 徐积文单位: 浙江大学...\n" + 
			"博文\n" + 
			"来自：	zzzsdust的博客\n" + 
			"KMP算法理解\n" + 
			"阅读数 200\n" + 
			"\n" + 
			"参考这篇博客http://blog.csdn.net/qq_33323162/article/details/52397814加了点文字，有助于自己理解程序员代码面试指南（左程云）读书笔记 第九章KM...\n" + 
			"博文\n" + 
			"来自：	accumulate_zhang的博客\n" + 
			"KMP算法Next数组计算\n" + 
			"阅读数 2万+\n" + 
			"\n" + 
			"KMP算法是在最近这两年的软件设计师考试中才出现的。2次都是让求Next函数的序列（其实是）。先看看题吧。（2011年下半年上午题）（2012年上半年上午题）其实做这个题很简单，我先说说这个题里的各种...\n" + 
			"博文\n" + 
			"来自：	崔成龙 . 勇往直前\n" + 
			"分治法和二分法的时间复杂度简明分析\n" + 
			"阅读数 9326\n" + 
			"\n" + 
			"二分：通过O(1)的操作，将规模为 n 的问题变成了 n/2 的问题。即：T( n ) = T( n / 2 ) + O( 1 )；分治：通过O(1)的操作，将规模为 n 的问题变成了2个 n/2 的...\n" + 
			"博文\n" + 
			"来自：	qilei2010的专栏\n" + 
			"Android Studio中配置及使用OpenCV示例（一）\n" + 
			"阅读数 3万+\n" + 
			"\n" + 
			"前言：最近在做项目移植，项目较大，在Eclipse中配置的Jni及OpenCV环境没任何问题，但是迁移到Studio中就问题一大堆，网上也找了一些资料参考及学习，很感谢前人留下的总结及经验。关于在AS...\n" + 
			"博文\n" + 
			"来自：	gao_chun\n" + 
			"Hbase 布隆过滤器BloomFilter介绍\n" + 
			"阅读数 2万+\n" + 
			"\n" + 
			"1、主要功能 提高随机读的性能 2、存储开销 bloom filter的数据存在StoreFile的meta中，一旦写入无法更新，因为StoreFile是不可变的。Bloomfilter是...\n" + 
			"博文\n" + 
			"来自：	opensure的专栏\n" + 
			"【小程序】微信小程序开发实践\n" + 
			"阅读数 19万+\n" + 
			"\n" + 
			"帐号相关流程注册范围 企业 政府 媒体 其他组织换句话讲就是不让个人开发者注册。 :)填写企业信息不能使用和之前的公众号账户相同的邮箱,也就是说小程序是和微信公众号一个层级的。填写公司机构信息,对公账...\n" + 
			"博文\n" + 
			"来自：	小雨同学的技术博客\n" + 
			"应用程序正常初始化 0x0150002失败\n" + 
			"阅读数 2万+\n" + 
			"\n" + 
			"　用VC2005编译的程序，编译时没有任何错误，但是运行时就是提示“应用程序正常初始化失败”！！ 查找了各方面资料，做了各种尝试，网上说什么的都有：有让安装vc2005 sp1补丁的；有让安装vcre...\n" + 
			"博文\n" + 
			"来自：	DDR的专栏\n" + 
			"Spring Boot集成持久化Quartz定时任务管理和界面展示\n" + 
			"阅读数 6万+\n" + 
			"\n" + 
			"前言本文是对之前的一篇文章Spring+SpringMVC+mybatis+Quartz整合代码部分做的一个修改和补充， 其中最大的变化就是后台框架变成了Spring Boot。本工程所用到的技术或工...\n" + 
			"博文\n" + 
			"来自：	天降风云的博客\n" + 
			"thymeleaf模板实现html5标签的非严格检查\n" + 
			"阅读数 2万+\n" + 
			"\n" + 
			"一、概述最近在springboot项目引入thymeleaf模板时，使用非严格标签时，运行会报错。默认thymeleaf模板对html5标签是严格检查的。二、在项目中加NekoHTML库在Maven中...\n" + 
			"博文\n" + 
			"来自：	Luck_ZZ的博客\n" + 
			"创建Glusterfs分布式RAID10卷\n" + 
			"阅读数 9401\n" + 
			"\n" + 
			"Glusterfs3.2.4/5支持五种Volume，即Distribute卷、Stripe卷、Replica卷、Distribute stripe卷和Distribute replica卷，这五种卷...\n" + 
			"博文\n" + 
			"来自：	刘爱贵的专栏\n" + 
			"改造动态framework为静态framework\n" + 
			"阅读数 2641\n" + 
			"\n" + 
			"公司产品之前使用xmpp作为底层库，之前同事编译自己的sdk静态库想生成.a库，但是各种编译问题（其实耐心修改配置都能解决），但是从百度找到方案用framework可以解决，所以最终使用的是frame...\n" + 
			"博文\n" + 
			"来自：	mingming24的专栏\n" + 
			"centos 查看命令源码\n" + 
			"阅读数 5万+\n" + 
			"\n" + 
			"# yum install yum-utils 设置源: [base-src] name=CentOS-5.4 - Base src - baseurl=http://vault.ce...\n" + 
			"博文\n" + 
			"来自：	linux/unix\n" + 
			"史上最好的LDA(线性判别分析)教程\n" + 
			"阅读数 2万+\n" + 
			"\n" + 
			"一、前言最近由于研究需要，要用到线性判别分析(LDA)。于是找了很多资料来看，结果发现大部分讲的都是理论知识，因此最后还是看的一知半解，后来终于找到了个英文的文档，作者由PCA引入LDA，看过后豁然开...\n" + 
			"博文\n" + 
			"来自：	jnulzl的专栏\n" + 
			"Java设计模式学习08——组合模式\n" + 
			"阅读数 1万+\n" + 
			"\n" + 
			"一、组合模式适用场景把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式对部分对象和整体对象进行管理。二、组合模式结构 抽象构件(Conponent)角色：所有类的共有接口，定义了叶子和...\n" + 
			"博文\n" + 
			"来自：	小小本科生成长之路\n" + 
			"单机最大的TCP连接数及其修改\n" + 
			"阅读数 1万+\n" + 
			"\n" + 
			"单机最大的TCP连接数及其修改 一个误解: 单个服务器程序可承受最大连接数“理论”上是“65535” .    65535这个数字的由来，很多人想当然地将它与port最大值联系起来。的确，TCP的...\n" + 
			"博文\n" + 
			"来自：	田发江的专栏\n" + 
			"强连通分量及缩点tarjan算法解析\n" + 
			"阅读数 48万+\n" + 
			"\n" + 
			"强连通分量： 简言之 就是找环（每条边只走一次，两两可达） 孤立的一个点也是一个连通分量   使用tarjan算法 在嵌套的多个环中优先得到最大环( 最小环就是每个孤立点）   定义： int Ti...\n" + 
			"博文\n" + 
			"来自：	九野的博客\n" + 
			"python图片处理类之~PIL.Image模块(ios android icon图标自动生成处理)\n" + 
			"阅读数 3万+\n" + 
			"\n" + 
			"1.从pyCharm提示下载PIL包  http://www.pythonware.com/products/pil/   2.解压后，进入到目录下 cd /Users/jianan/Dow...\n" + 
			"博文\n" + 
			"来自：	专注于cocos+unity+服务器全栈\n" + 
			"Centos7使用yum安装Mysql5.7.19的详细步骤（可用）\n" + 
			"阅读数 1909\n" + 
			"\n" + 
			"Centos7的yum源中默认是没有mysql,因为现在已经用mariaDB代替mysql了。首先我们下载mysql的repo源，我们可以去mysql官网找最新的repo源地址地址：https://d...\n" + 
			"博文\n" + 
			"来自：	LYoungJ的博客\n" + 
			"编写C语言版本的卷积神经网络CNN之一：前言与Minst数据集\n" + 
			"阅读数 2万+\n" + 
			"BBC ABCDAB ABCDABCDABDE" + 
			"卷积神经网络是深度学习的基础，但是学习CNN却不是那么简单，虽然网络上关于CNN的相关代码很多，比较经典的是tiny_cnn（C++）、DeepLearnToolbox（Matlab）等等，但通过C语...\n" + 
			"博文\n" + 
			"来自：	tostq的专栏\n" + 
			"关于SpringBoot bean无法注入的问题（与文件包位置有关）\n" + 
			"阅读数 13万+\n" + 
			"\n" + 
			"问题场景描述整个项目通过Maven构建，大致结构如下： 核心Spring框架一个module spring-boot-base service和dao一个module server-core 提供系统...\n" + 
			"博文\n" + 
			"来自：	开发随笔\n" + 
			"VS2010 操作Word（一）建立工程\n" + 
			"阅读数 5966\n" + 
			"\n" + 
			"在网上所搜索很多操作Word的都是用VC，VS2010做了一些修改，添加操作的方式和用法都有所变化。 要操作Word必须先添加对应的类，如下图在工程中添加操作类（TypeLib中的 MFC类）： ...\n" + 
			"博文\n" + 
			"来自：	xiangjianbo127的专栏\n" + 
			"jquery/js实现一个网页同时调用多个倒计时(最新的)\n" + 
			" \n" + 
			"";

}
